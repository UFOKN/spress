// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"

// spress.cpp
integers encode_(size_t n, doubles x, doubles y);
extern "C" SEXP _spress_encode_(SEXP n, SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(encode_(cpp11::as_cpp<cpp11::decay_t<size_t>>(n), cpp11::as_cpp<cpp11::decay_t<doubles>>(x), cpp11::as_cpp<cpp11::decay_t<doubles>>(y)));
  END_CPP11
}
// spress.cpp
data_frame decode_(size_t n, integers h, doubles bb);
extern "C" SEXP _spress_decode_(SEXP n, SEXP h, SEXP bb) {
  BEGIN_CPP11
    return cpp11::as_sexp(decode_(cpp11::as_cpp<cpp11::decay_t<size_t>>(n), cpp11::as_cpp<cpp11::decay_t<integers>>(h), cpp11::as_cpp<cpp11::decay_t<doubles>>(bb)));
  END_CPP11
}
// spress.cpp
data_frame grid_(size_t n, doubles bb);
extern "C" SEXP _spress_grid_(SEXP n, SEXP bb) {
  BEGIN_CPP11
    return cpp11::as_sexp(grid_(cpp11::as_cpp<cpp11::decay_t<size_t>>(n), cpp11::as_cpp<cpp11::decay_t<doubles>>(bb)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _spress_decode_(SEXP, SEXP, SEXP);
extern SEXP _spress_encode_(SEXP, SEXP, SEXP);
extern SEXP _spress_grid_(SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_spress_decode_", (DL_FUNC) &_spress_decode_, 3},
    {"_spress_encode_", (DL_FUNC) &_spress_encode_, 3},
    {"_spress_grid_",   (DL_FUNC) &_spress_grid_,   2},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_spress(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
